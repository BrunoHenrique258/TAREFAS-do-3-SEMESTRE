// código de desativação do powershell
Set-ExecutionPolicy RemoteSigned


// Página de login - divisão da tela

import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import api from "../services/api";
import { useAuth } from "../context/AuthContext";
import styled from "styled-components";

const Login: React.FC = () => {
  const navigate = useNavigate();
  const { login } = useAuth(); // Usando o contexto
  const [email, setEmail] = useState<string>('');
  const [senha, setSenha] = useState<string>('');

  // Função para realizar login
  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
  
    if (!email || !senha) {
      alert("Por favor, preencha todos os campos.");
      return;
    }
  
    try {
      const response = await api.post('/api/users/login', { 
        email: email,
        password: senha 
      });
      console.log('Login bem-sucedido:', response.data);
      localStorage.setItem('token', response.data.token);
      login(response.data.token); // Usando a função do contexto
      navigate('/home');
    } catch (error) {
      console.error('Erro ao fazer login:', error);
      alert('Credenciais inválidas ou erro no servidor.');
    }
  };

  return (
    <MainContainer>
      {/* Divisão da Tela */}
      <Container>
        {/* Painel Esquerdo - Formulário de Login */}
        <LoginContainer>
          <Logo>Cloud.<span>io</span></Logo>

          <LoginForm onSubmit={handleLogin}>
            <InputLabel htmlFor="email">Insira seu E-mail:</InputLabel>
            <InputField
              type="email"
              id="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)} // Atualiza o estado do email
              required
            />

            <InputLabel htmlFor="senha">Insira sua senha:</InputLabel>
            <InputField
              type="password"
              id="senha"
              value={senha}
              onChange={(e) => setSenha(e.target.value)} // Atualiza o estado da senha
              required
            />

            <LoginButton type="submit">ENTRAR</LoginButton>
          </LoginForm>

          <SignupLink onClick={() => navigate("/cadastro")}>CADASTRE-SE AQUI!</SignupLink>
        </LoginContainer>

        {/* Painel Direito - Área Editável */}
        <EditablePanel>
          <h2>Painel Editável</h2>
          <EditableContent contentEditable="true">
            <p>Você pode editar esse conteúdo no painel direito. Adicione seu texto aqui!</p>
          </EditableContent>
        </EditablePanel>
      </Container>
    </MainContainer>
  );
};

export default Login;

// Styled Components

const MainContainer = styled.div`
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 0 20px;
`;

const Container = styled.div`
  display: flex;
  height: 100vh;
  width: 100%;
`;

const LoginContainer = styled.div`
  flex: 1;
  background-color: #f0f0f0;
  padding: 20px;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
`;

const Logo = styled.h1`
  font-size: 2.5rem;
  span {
    color: #4caf50;
  }
`;

const LoginForm = styled.form`
  width: 100%;
  max-width: 400px;
  display: flex;
  flex-direction: column;
`;

const InputLabel = styled.label`
  margin-bottom: 8px;
  font-size: 1rem;
  font-weight: bold;
`;

const InputField = styled.input`
  padding: 10px;
  margin-bottom: 20px;
  border: 1px solid #ccc;
  border-radius: 4px;
  font-size: 1rem;
  width: 100%;
`;

const LoginButton = styled.button`
  padding: 10px;
  background-color: #4caf50;
  color: white;
  font-size: 1rem;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  &:hover {
    background-color: #45a049;
  }
`;

const SignupLink = styled.p`
  margin-top: 10px;
  font-size: 1rem;
  color: #0073e6;
  cursor: pointer;
  &:hover {
    text-decoration: underline;
  }
`;

const EditablePanel = styled.div`
  flex: 1;
  background-color: #dcdcdc;
  padding: 20px;
  overflow: auto;
`;

const EditableContent = styled.div`
  width: 100%;
  height: 100%;
  padding: 10px;
  border: 1px solid #ccc;
  resize: both;
  overflow: auto;
  background-color: #fff;
  min-height: 100px;
  font-size: 1rem;
  color: #333;
  line-height: 1.5;
`;

// Código carrocel de imagens

1° React-Slick
npm install react-slick slick-carousel

* Estilos do slick:
// no seu index.tsx ou App.tsx
import "slick-carousel/slick/slick.css"; 
import "slick-carousel/slick/slick-theme.css";

import React from "react";
import Slider from "react-slick";

const images = [
  "https://picsum.photos/id/1011/800/400",
  "https://picsum.photos/id/1012/800/400",
  "https://picsum.photos/id/1013/800/400"
];

const ImageCarousel: React.FC = () => {
  const settings = {
    dots: true,
    infinite: true,
    speed: 500,
    slidesToShow: 1,
    slidesToScroll: 1,
    autoplay: true
  };

  return (
    <Slider {...settings}>
      {images.map((url, index) => (
        <div key={index}>
          <img src={url} alt={`Imagem ${index + 1}`} style={{ width: "100%", height: "auto" }} />
        </div>
      ))}
    </Slider>
  );
};

export default ImageCarousel;

2°Swipers.js
npm install swiper

import { Swiper, SwiperSlide } from "swiper/react";
import "swiper/css";

const images = [
  "https://picsum.photos/id/1005/800/400",
  "https://picsum.photos/id/1006/800/400",
  "https://picsum.photos/id/1008/800/400"
];

const SwiperCarousel = () => (
  <Swiper spaceBetween={50} slidesPerView={1} autoplay>
    {images.map((img, idx) => (
      <SwiperSlide key={idx}>
        <img src={img} alt={`slide-${idx}`} style={{ width: "100%" }} />
      </SwiperSlide>
    ))}
  </Swiper>
);

// tsconfig.json

"compilerOptions": {
    "jsx": "react-jsx",
    "target": "ESNext",
    "module": "NodeNext",
    "rootDir": "./src",
    "outDir": "./dist",
    "strict": true,
    "moduleResolution": "NodeNext",
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "allowSyntheticDefaultImports": true,
    "resolveJsonModule": true,
    "isolatedModules": true
  },
